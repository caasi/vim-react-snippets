#
#  React snippets
#

snippet cs "React.addons.classSet" b
var cx = React.addons.classSet;
endsnippet

snippet cdm "component did mount" b
componentDidMount() {
	${1}
},$0
endsnippet

snippet cdup "component did update" b
componentDidUpdate(prevProps, prevState) {
	${1}
},$0
endsnippet

snippet cwm "component will mount" b
componentWillMount() {
	${1}
},$0
endsnippet

snippet cwr "component will receive props" b
componentWillReceiveProps(nextProps) {
	${1}
},$0
endsnippet

snippet cwun "component will unmount" b
componentWillUnmount() {
	${1}
},$0
endsnippet

snippet cwu "component will update" b
componentWillUpdate(nextProps, nextState) {
	${1}
},$0
endsnippet

snippet cx
cx({
	${1}: ${2}
});
endsnippet

snippet fup
forceUpdate(${1:callback});
endsnippet

snippet gdp "get default props" b
getDefaultProps() {
	return {
		${1}: ${2}
	};
},$0
endsnippet

snippet gis "get initial state" b
getInitialState() {
	return {
		${1}: ${2}
	};
},$0
endsnippet

snippet ism "is mounted"
isMounted()
endsnippet

snippet jsx "define jsx dom" b
/**
 * @jsx React.DOM
 */
endsnippet

snippet pt "propTypes" b
propTypes: {
	${1}: PropTypes.${2:string}
},
endsnippet

snippet rci "import class/component" b
import ${1} from '$1';
endsnippet

snippet rcc "create class/component" b
${1:import React from 'react';
import { PureRenderMixin } from 'react/addons';}

${2:var { PropTypes } = React;}

var ${3:ClassName} = React.createClass({
	mixins: [PureRenderMixin],
	render() {
		var { className, children } = this.props;
		return (
			<div className={\`${4} \${className || ''}\`}>
				${VISUAL}${5}
				{children}
			</div>
		);
	}
});$0

${6:export default $3;}
endsnippet

snippet rccc "create class/component container" b
${1:import Recat from 'react';
import { PureRenderMixin } from 'react/addons';}

var ${2:ClassName} = React.createClass({
	mixins: [PureRenderMixin],
	render() {
		return <${VISUAL}$3 {...this.state}/>;
	}
});$0

${4:export default $2;}
endsnippet

snippet ren
render() {
	return (
		${1:<div />}
	);
}$0
endsnippet

snippet sst "set state" b
this.setState({
	${1}: ${2}
});$0
endsnippet

snippet scu "should component update"
shouldComponentUpdate(nextProps, nextState) {
	${1}
},$0
endsnippet

snippet dprops "get property" i
var { className, children } = this.props;
endsnippet

snippet dstate "get state" i
var { ${1} } = this.state;
endsnippet
