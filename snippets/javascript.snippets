 snippet cs
	var cx = React.addons.classSet;

s nippet cdm
	componentDidMount() {
		${1}
	},

sn ippet cdup
	componentDidUpdate(prevProps, prevState) {
		${1}
	},

sni ppet cwm
	componentWillMount() {
		${1}
	},

snippet cwr
	componentWillReceiveProps(nextProps) {
		${1}
	},

snippet cwun
	componentWillUnmount() {
		${1}
	},

snippet cwu
	componentWillUpdate(nextProps, nextState) {
		${1}
	},

snippet cx
	cx({
		${1}: ${2}
	});

snippet fup
	forceUpdate(${1:callback});

snippet gdp
	getDefaultProps() {
		return {
			${1}: ${2}
		};
	},

snippet gis
	getInitialState() {
		return {
			${1}: ${2}
		};
	},

snippet ism
	isMounted()

snippet jsx
	/**
	 * @jsx React.DOM
	 */

snippet pt
	propTypes: {
		${1}: PropTypes.${2:string}
	},

snippet rci
	import ${1:ClassName} from './$1';

s nippet rcc
	import React from 'react';
	import { PureRenderMixin } from 'react/addons';

	var { PropTypes } = React;

	var ${1:ClassName} = React.createClass({
		mixins: [PureRenderMixin],
		render() {
			var { className = '', children = [] } = this.props;
			return (
				<div className={\`${2} \${className}\`}>
					${3}
					{children}
				</div>
			);
		}
	});

	export default $1;

snippet rccc
	import React from 'react';
	import { PureRenderMixin } from 'react/addons';

	var ${1:ClassName} = React.createClass({
		mixins: [PureRenderMixin],
		render() {
			return <div {...this.state} />;
		}
	});

	export default $1;

snippet ren
	render() {
		return (
			${1:<div />}
		);
	}

snippet sst
	setState({
		${1}: ${2}
	});

snippet scu
	shouldComponentUpdate(nextProps, nextState) {
		${1}
	},

snippet dprops
	var { className = '', children = [] } = this.props;

snippet dstate
	var { ${1} } = this.state;

# Redux Synchronous Action Type
snippet rdxst
	export const ${1:ACTION} = '$1'

# Redux Asynchronous Action Type
snippet rdxat
	export const ${1:ACTION}_REQUEST = '$1_REQUEST'
	export const $1_SUCCESS = '$1_SUCCESS'
	export const $1_FAILURE = '$1_FAILURE'

# Redux Synchronous Thunk Action
snippet rdxsa
	export function ${1:action}(data) {
		return d => Promise.resolve(d({ type: ${2:ACTION}, data }))
	}

# Redux Asynchronous Thunk Action
snippet rdxaa
	export function ${1:action}(data) {
		return dispatch => {
			dispatch({ type: ${2:ACTION}_REQUEST })
			let promise = ${3:request}
			promise
				.then(data => dispatch({ type: $2_SUCCESS, data }))
				.catch(error => dispatch({ type: $2_FAILURE, error }))
			return promise
		}
	}
